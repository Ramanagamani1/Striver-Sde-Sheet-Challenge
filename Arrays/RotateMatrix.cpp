/*
Problem Statement
Given a 2-dimensional matrix of size ‘N’ x ‘M’, rotate the elements of the matrix clockwise.
For example: 
Input Matrix: [ [ 1, 2, 3 ] 
                [ 4, 5, 6 ] 
                [ 7, 8, 9 ] ]

Output Matrix: [ [ 4, 1, 2 ] 
                 [ 7, 5, 3 ] 
                 [ 8, 9, 6 ] ]

The output matrix is generated by rotating the elements of the input matrix in a clockwise direction. Note that every element is rotated only once. 
Note :
You do not need to print anything; it has already been taken care of. Also, update the given matrix in-place.
Input Format :
The first line of input contains an integer 'T' representing the number of test cases. Then the test cases follow.

The first line of each test case contains two single-spaced integers N and M, representing the number of rows and columns of the matrix, respectively.

The next N line contains M single-spaced integers denoting the matrix elements. 
Output Format :
For each test case, the modified matrix is printed.

The output for each test case is in a separate line.
Constraints :
1 <= T <= 10
1 <= N, M <= 100
-10^5 <= data <= 10^5,

where ‘T’ is the number of test cases,  ‘N’ and ‘M’ are the numbers of rows and columns respectively and ‘data’ is the value of the elements of the matrix.
Sample Input 1 :
1
4 4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
Sample Output 1 :
5 1 2 3
9 10 6 4
13 11 7 8
14 15 16 12 */

#include <bits/stdc++.h> 

void rotateMatrix(vector<vector<int>> &mat, int n, int m)
{
    // Write your code here
    int r1=0,r2=n-1,c1=0,c2=m-1;
    while(r1<r2 && c1<c2){
        int temp= mat[r1][c1];
        int i= r1+1;
        while(i<=c2) {
            swap(temp,mat[r1][i]);
            i+=1;
        }
        i=r1+1;
        while(i<=r2){
            swap(temp,mat[i][c2]);
            i+=1;
        }
        i=c2-1;
        while(i>=c1){
            swap(temp,mat[r2][i]);
            i-=1;
        }
        i=r2-1;
        while(i>=r1){
            swap(temp,mat[i][c1]);
            i-=1;
        }
        r1+=1;
        r2-=1;
        c1+=1;
        c2-=1;
    }
}